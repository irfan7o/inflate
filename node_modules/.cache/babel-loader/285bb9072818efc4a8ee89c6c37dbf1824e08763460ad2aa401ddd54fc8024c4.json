{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\Code\\\\Inflate\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport Header from './components/Header';\nimport CountrySelector from './components/CountrySelector';\nimport YearSelector from './components/YearSelector';\nimport CurrencySelector from './components/CurrencySelector';\nimport InflationChart from './components/InflationChart';\nimport InflationStats from './components/InflationStats';\nimport InflationCalculator from './components/InflationCalculator';\nimport HedgeRecommendations from './components/HedgeRecommendations';\nimport { inflationData, countries, currencyRates } from './data/inflationData';\nimport { hedgeAssets } from './data/hedgeAssets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _convertedData;\n  const [selectedCountry, setSelectedCountry] = useState('Indonesia');\n  const [chartType, setChartType] = useState('line');\n  const currentCountryData = inflationData[selectedCountry];\n\n  // Use all available data for the chart\n  const convertedData = currentCountryData.data;\n  const currentInflationRate = ((_convertedData = convertedData[convertedData.length - 1]) === null || _convertedData === void 0 ? void 0 : _convertedData.rate) || 0;\n  const handleCountryChange = country => {\n    setSelectedCountry(country);\n    // Update currency to match country default\n    const newCountryData = inflationData[country];\n    setSelectedCurrency(newCountryData.currency);\n\n    // Update year if current year doesn't exist in new country data\n    const newYears = newCountryData.data.map(item => item.year);\n    if (!newYears.includes(selectedYear)) {\n      setSelectedYear(Math.max(...newYears));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-dark-200\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto px-6 py-8\",\n      children: [/*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\",\n        initial: {\n          y: 20,\n          opacity: 0\n        },\n        animate: {\n          y: 0,\n          opacity: 1\n        },\n        transition: {\n          duration: 0.5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CountrySelector, {\n          countries: countries,\n          selectedCountry: selectedCountry,\n          onCountryChange: handleCountryChange,\n          countryData: inflationData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-8\",\n        children: /*#__PURE__*/_jsxDEV(InflationChart, {\n          data: convertedData,\n          selectedYear: selectedYear,\n          chartType: chartType,\n          onChartTypeChange: setChartType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InflationCalculator, {\n        countryData: currentCountryData,\n        selectedCountry: selectedCountry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HedgeRecommendations, {\n        hedgeAssets: hedgeAssets,\n        inflationRate: currentInflationRate.toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6IMGrGV/2jnWvzjahNkud2GrpnE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","motion","Header","CountrySelector","YearSelector","CurrencySelector","InflationChart","InflationStats","InflationCalculator","HedgeRecommendations","inflationData","countries","currencyRates","hedgeAssets","jsxDEV","_jsxDEV","App","_s","_convertedData","selectedCountry","setSelectedCountry","chartType","setChartType","currentCountryData","convertedData","data","currentInflationRate","length","rate","handleCountryChange","country","newCountryData","setSelectedCurrency","currency","newYears","map","item","year","includes","selectedYear","setSelectedYear","Math","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","div","initial","y","opacity","animate","transition","duration","onCountryChange","countryData","onChartTypeChange","inflationRate","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/Code/Inflate/src/App.jsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport Header from './components/Header';\r\nimport CountrySelector from './components/CountrySelector';\r\nimport YearSelector from './components/YearSelector';\r\nimport CurrencySelector from './components/CurrencySelector';\r\nimport InflationChart from './components/InflationChart';\r\nimport InflationStats from './components/InflationStats';\r\nimport InflationCalculator from './components/InflationCalculator';\r\nimport HedgeRecommendations from './components/HedgeRecommendations';\r\nimport { inflationData, countries, currencyRates } from './data/inflationData';\r\nimport { hedgeAssets } from './data/hedgeAssets';\r\n\r\nfunction App() {\r\n  const [selectedCountry, setSelectedCountry] = useState('Indonesia');\r\n  const [chartType, setChartType] = useState('line');\r\n\r\n  const currentCountryData = inflationData[selectedCountry];\r\n\r\n  // Use all available data for the chart\r\n  const convertedData = currentCountryData.data;\r\n\r\n  const currentInflationRate = convertedData[convertedData.length - 1]?.rate || 0;\r\n\r\n  const handleCountryChange = (country) => {\r\n    setSelectedCountry(country);\r\n    // Update currency to match country default\r\n    const newCountryData = inflationData[country];\r\n    setSelectedCurrency(newCountryData.currency);\r\n    \r\n    // Update year if current year doesn't exist in new country data\r\n    const newYears = newCountryData.data.map(item => item.year);\r\n    if (!newYears.includes(selectedYear)) {\r\n      setSelectedYear(Math.max(...newYears));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-dark-200\">\r\n      <Header />\r\n      \r\n      <main className=\"max-w-7xl mx-auto px-6 py-8\">\r\n        {/* Controls Section */}\r\n        <motion.div \r\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\"\r\n          initial={{ y: 20, opacity: 0 }}\r\n          animate={{ y: 0, opacity: 1 }}\r\n          transition={{ duration: 0.5 }}\r\n        >\r\n          <CountrySelector\r\n            countries={countries}\r\n            selectedCountry={selectedCountry}\r\n            onCountryChange={handleCountryChange}\r\n            countryData={inflationData}\r\n          />\r\n          <div></div>\r\n          <div></div>\r\n        </motion.div>\r\n\r\n        {/* Chart Section */}\r\n        <div className=\"mb-8\">\r\n          <InflationChart\r\n            data={convertedData}\r\n            selectedYear={selectedYear}\r\n            chartType={chartType}\r\n            onChartTypeChange={setChartType}\r\n          />\r\n        </div>\r\n\r\n        {/* Calculator Section */}\r\n        <InflationCalculator\r\n          countryData={currentCountryData}\r\n          selectedCountry={selectedCountry}\r\n        />\r\n\r\n        {/* Recommendations Section */}\r\n        <HedgeRecommendations\r\n          hedgeAssets={hedgeAssets}\r\n          inflationRate={currentInflationRate.toFixed(2)}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}